# -*- shell-script -*-

is-fn() {
  declare -F "$1" >/dev/null
}

script=

fn-parent() {
  local _parent _i

  if [ -n "$script" ] ; then

    _parent="$script"

  elif [ -n "$FUNCNAME" ] ; then

    for ((_i = 0 ; _i < ${#FUNCNAME[@]} ; _i++ )) ; do

      [[ "${FUNCNAME[$_i]}" =~ ^fn- ]] && continue

      if [[ "${FUNCNAME[$_i]}" =~ ^[[:alpha:]] ]] ; then
        _parent="${FUNCNAME[$_i]}"
        break
      fi
    done
  fi

  echo -n "${_parent:-?}"
}

fn-usage() {
  echo -e "\e[34mUsage: $(fn-parent) $1\e[0m" >&2
  return 2
}

fn-error() {
  echo -e "\e[1m\e[31m$(fn-parent): $1\e[0m" >&2
  return 1
}

fn-info() {
  echo -e "\e[1m\e[35m$(fn-parent): $1\e[0m"
}

fn_trace=
fn-trace() {
  [ -z "$fn_trace" ] || echo -e "\e[1m\e[36m$(fn-parent): $1\e[0m" >&2
}

fn-vars() {
  echo -e "\e[1m\e[34m$(fn-parent): $(declare -p $@ | sed -r 's/(\[[[:digit:]]+\]=)/\n\1/g')\e[0m" >&2
}

fn-abort() {
  if [ -z "$PS1" ] ; then

    # abort scripts or subshell functions
    fn-error "$1"
    exit "${2:1}"

  else

    # work-around to abort (nested) functions
    local _origin="$(fn-parent)"
    eval "_fn-abort() { unset $_origin; : \"\${$_origin:?\$1}\"; }"
    _fn-abort "$1"

  fi
}

fn-logger() {
  logger --tag "$(fn-parent)" --priority "user.$1" "$2"
}

fn-export() {
  if [ $# -gt 0 ] ; then
    local _fn _scope
    for _scope in "$@" ; do
      if [ -f "$_scope" ] ; then
        for _fn in $(sed -rn 's/^([[:alpha:]_][[:alnum:]_-]+) *\(\).*$/\1/p' "$_scope") ; do
          export -f "$_fn"
        done
      else
        for _fn in $(declare -F | cut -d' ' -f3 | grep -E "$_scope") ; do
          export -f "$_fn"
        done
      fi
    done
  else
    fn-usage "{<regexp>}"
  fi
}

fn_xtrace=
fn-xtrace() {
  # Enable xtrace until return from calling function.
  fn_xtrace="${FUNCNAME[1]}"
  [ -n "$fn_xtrace" ] || return 0

  # ensure $PS4 has  value (for security reasons shells running as root do not inherit $PS4)
  export PS4="+ \${FUNCNAME[0]} \$LINENO: "

  fn_trace=y
  trap 'if [[ "$FUNCNAME" == "$fn_xtrace" ]] ; then set +x; trap - RETURN ERR; echo "-===- Stopped xtrace for $fn_xtrace() -===-" >&2; fn_xtrace=; fn_trace=; fi' RETURN
  trap 'set +x; fn_xtrace=; fn_trace=; trap - RETURN ERR' ERR

  echo "-===- Start xtrace for $fn_xtrace() -===-" >&2
  set -x
}
