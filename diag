# -*- shell-script -*-

script=

fn-usage() {
  echo -e "\e[34mUsage: ${script:-${FUNCNAME[1]}} $1\e[0m"
  return 2
}

fn-error() {
  echo -e "\e[31m${script:-${FUNCNAME[1]}}: $1\e[0m" >&2
  return 1
}

fn-trace() {
  echo -e "\e[33m${script:-${FUNCNAME[1]}}: $1\e[0m" >&2
}

fn-vars() {
  echo -e "\e[34m${script:-${FUNCNAME[1]}}: $(declare -p $@ | sed -r 's/(\[[[:digit:]]+\]=)/\n\1/g')\e[0m" >&2
}

fn-abort() {
  if [ -n "$PS1" ] ; then

    # abort scripts or subshell functions
    fn-error "$1"
    exit 1

  else

    # work-around to abort (nested) functions
    local _origin="${script:-${FUNCNAME[1]}}"
    eval "_fn-abort() { unset $_origin; : \"\${$_origin:?\$1}\"; }"
    _fn-abort "$1"

  fi
}

fn_xtrace=
fn-xtrace() {
  # Enable xtrace until return from calling function.
  fn_xtrace="${FUNCNAME[1]}"
  [ -n "$fn_xtrace" ] || return 0

  trap 'if [[ "$FUNCNAME" == "$fn_xtrace" ]] ; then set +x; trap - RETURN; echo "-===- Stopped trace for $fn_xtrace() -===-"; fn_xtrace=; fi' RETURN

  echo "-===- Start xtrace for $fn_xtrace() -===-"
  set -x
}

export -f fn-usage fn-error fn-trace fn-abort fn-xtrace
