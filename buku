# -*- mode:shell-script -*-
# support for bookmark manager "buku".

in-path buku || return 0

export BUKU_COLORS=xenxc

buku() {
  if [[ "$*" =~ --np ]] ; then
    # no UI
    /usr/bin/buku "$@"
  else
    # enable edit of bookmarks in case Emacs is in use and provide persistent UI history
    EDITOR="${EDITOR/ --no-wait/}" \
    $(in-path rlwrap && echo "rlwrap --history-filename $HOME/.local/share/buku/history --always-readline --no-children") \
    /usr/bin/buku "$@"
  fi
}

# CAUTION: For unknown reasons bash completion is not loaded on F40.
source /usr/share/bash-completion/completions/buku-completion.bash

buku-import() {
  # non-interactive (re)import sjuppressing error messages concerning repeated imports of same URLs
  /usr/bin/buku --nostdin --ai <<<"$(yes|head -3)" 2> >(grep -v -E ' URL .+ already exists at index ') > >(sed -r 's~^.*\(y/n\): ~~;/^$/d')
}

fzf-buku() (
  if [[ "$1" =~ ^-+h(elp)?$ ]] ; then
    fn-usage "[--exclude keyword .. --sany keyword .. | --sall keyword .. | --sreg exp | --stag tag [,|+] ... [- tag, ...]]"
    return 0
  fi

  myprofile _fzf

  _url() {
    buku --nostdin --np --print "$1" -f 10
  }

  { echo "ID|Tags|Title"
    buku --np --nc --json --format 5 $([ $# -gt 0 ] || echo "--print") "$@" | \
    gojq -r '.[] | [ .index, .tags, .title ] | join("|")' | \
    sed -r 's/bookmarks toolbar//;s/,,/,/;s/,\|/\|/;s/\|[[:digit:]]{4}[[:alpha:]]{3}[[:digit:]]{2},/\|/'
  } | column -t -s"|" -R1 -l3 | \
  _fzf-wrapper --border-label " Bookmarks fetched from ~/.local/share/buku/bookmarks.db " \
               --bind "enter:execute-silent(_fzf_browser {1})" \
               --bind 'result:unbind(f1)+unbind(f4)+unbind(f5)' \
               --color "label:reverse" \
               --header-lines 1 \
               --list-border none \
               --no-multi \
               --preview "_url {1}" \
               --preview-label-pos 1 \
               --preview-window "down,1,border-top,wrap" \
               --preview-label " Press ENTER to open current URL in \$BROWSER: " \
               --reverse \
               --smart-case \
               --wrap
)
_complete-fzf-buku() {
  [ "${#COMP_WORDS[@]}" == 2 ] || return
  COMPREPLY=($(compgen -W "--{deep,sall,sany,sreg,stag}" -- "${COMP_WORDS[1]}"))
}
complete -F _complete-fzf-buku fzf-buku

if in-path sqlite3 ; then
  mozplaces() {
    # s.a. https://en.wikiversity.org/wiki/Firefox/Browsing_history_database history returns empty
    # list (even for active browser session) unless "Remember browsing and download history" is
    # enabled in FF settings
    local _places _query _pattern
    case "$1" in
        h|history) _query="SELECT datetime(h.visit_date/1000000,'unixepoch') AS Visited, p.url AS URL, p.title AS Title
                           FROM moz_places p, moz_historyvisits h
                           WHERE p.id = h.place_id
                           ORDER BY Visited";;
      b|bookmarks) _query="SELECT datetime(b.dateAdded/1000000,'unixepoch') AS Added, p.url AS URL , b.title AS Title
                           FROM moz_places p
                           JOIN moz_bookmarks b
                           ON p.id = b.fk
                           ORDER BY Added";;
                *) fn-usage "bookmarks|history [pattern ..]"; return 1;;
    esac

    shift
    [ $# -gt 0 ] && _pattern="($(IFS="|" echo "$@"))" || _pattern=".*"

    for _places in ~/.mozilla/firefox/*/places.sqlite ~/.librewolf/*/places.sqlite ; do

      if [ -s "$_places" ] ; then

        fn-trace "Examine \"$_places\"."

        # use a copy to avoid potential DB corruption (s.a. https://www.sqlite.org/c3ref/open.html)
        cp -f "$_places" /tmp/places.sqlite

        sqlite3 -readonly /tmp/places.sqlite "$_query" | grep --ignore-case --extended-regexp "$_pattern"
        break

      fi

    done

    rm -f /tmp/places.sqlite
  }

  fzf-mozplaces() (
    if [[ "$1" =~ ^(b(ookmarks)?|h(istory)?)$ ]] ; then

      myprofile _fzf

      _label-text() {
        printf " %s fetched from \"places.sqlite\". Press F1 for supported key bindings. " "${1^}"
      }
      export -f mozplaces _label-text

      local _scope
      _scope="$1"
      case "$_scope" in
        b*) _scope=bookmarks;;
        h*) _scope=history;;
      esac
      shift

      mozplaces "$_scope" $@ | \
      _fzf-wrapper --border-label "$(_label-text "$_scope")" \
                   --bind "alt-b:reload(mozplaces bookmarks $@)+transform-border-label(_label-text bookmarks)" \
                   --bind "alt-h:reload(mozplaces history $@)+transform-border-label(_label-text history)" \
                   --bind "enter:execute-silent(_fzf-browser {2})" \
                   --bind 'result:unbind(f4)+unbind(f5)' \
                   --color "label:reverse" \
                   --delimiter "|" \
                   --exit-0 \
                   --help "Alt-b:(Re)load bookmarks;Alt-h:(Re)load history;Enter:Open selected entry in \$BROWSER" \
                   --list-border none \
                   --no-multi \
                   --preview "echo {2}" \
                   --preview-window "down,1,border-top,wrap" \
                   --preview-label-pos 1 \
                   --preview-label " Press ENTER to open current URL in \$BROWSER: " \
                   --smart-case \
                   --tac \
                   --tiebreak=chunk,begin,length \
                   --with-nth '{1}  {3}' \
                   --wrap

    else
      fn-usage "bookmarks|history [pattern ..]"
    fi
  )
fi
