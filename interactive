# -*- shell-script -*-
# bash functions preferably used in interactive shells

a() {
  alias "$@" | m -p "bash aliases"
}
complete -A alias a

e() {
  # list current shell environment excluding
  # - $LS_COLORS (very long generated value, must be reformated for visual inspection)
  # - $PS1 (shell prompt may embed escape sequences distorting output)
  # - $BASH_FUNC* (intermediate bash variables)
  printenv -0 | grep -zvE "^(BASH_FUNC|LS_COLORS=|PS1=)" | sort -z | tr '\000' '\n' | m -p "shell environment"
}

h() {
  local _cnt _color
  if [[ "$1" =~ ^-(a|-all)$ ]] ; then
    shift
    _cnt=$HISTSIZE
  else
    _cnt="42"
  fi
  [ $# -gt 0 ] && _color=auto || _color=never
  history | grep --color=never -E "${1:-.*}" | tail -$_cnt | grep --colour=$_color -E "${1:-.*}"
}

history-cleanup() {
  # remove sensible a/o undesired entries from bash history
  # args: "$remove_regexp" .. [-- "$keep_regexp" ..]

  if [ -n "$HISTFILE" ] ; then

    local _pattern _histfile _keep _drop
    _drop="(${FUNCNAME[0]}"

    for _pattern in "$@" ; do

      if [[ "$_pattern" == "--" ]] ; then
        _keep="(~ยง~ยง~"
      elif [ -n "$_keep" ] ; then
        _keep+="|$_pattern"
      else
        _drop+="|$_pattern"
      fi

    done

    _drop+=")"
    [ -z "$_keep" ] && _keep="~ยง~ยง~" || _keep+=")"

    _histfile="$HISTFILE"

    eval "$(history |
            sed -rn '/'"$_keep"'/d;s/^ *([0-9]+) .*'"$_drop"'.*/\1/ip' |
            sort --numeric-sort --reverse |
            xargs --no-run-if-empty --replace=@ echo history -d @)"

    # Work-around for "history -w" failing to update history file mounted into a container.
    HISTFILE="$(mktemp --suffix=.history --tmpdir bash_XXXXXX)"
    history -w
    cat "$HISTFILE" >"$_histfile"
    HISTFILE="$_histfile"

    history -s : history-cleanup
    sleep 1

  fi

  true
}

l() {
  /usr/bin/ls --format=long --classify --all --color=auto --time-style="+%F %T" "$@"
}

lm() {
  l --color=always "$@" |& m -p lm
}

lmt() {
  l --color=always --sort=time "$@" |& m -p lmt
}

m() {
  local _prompt

  while [ $# -gt 0 ] ; do
    case "$1" in
           -h|--help) fn-usage "[-p|--prompt \"text\"]"; return 0;;
      -[pP]|--prompt) _prompt="$2 "; shift 2;;
                   *) break;;
    esac
  done

  TERM=xterm less --hilite-search \
                  --ignore-case \
                  --no-{histdups,init,vbell} \
                  --prompt="s$_prompt?f%f.?lt line %lt?L/%L. .?e(END)" \
                  --quit-if-one-screen \
                  --squeeze-blank-lines \
                  --status-line \
                  --tilde \
                  --use-color \
                  "$@"
}

complete -o bashdefault -o default l lmt lm m

new-alias() {
  # args: alias-name [{var=value|nohup|sudo}] "command-line"
  if [ $# -ge 2 ] ; then

    local _cmd _cmdln
    _cmdln="${@: -1}"
    [[ "$_cmdln" =~ ^[^[:alnum:]_-]*([[:alnum:]_-]+) ]] && _cmd="${BASH_REMATCH[1]}"

    local -a _prefix
    if [ $# -gt 2 ] ; then

      _prefix=("${@: 2}")
      _prefix[-1]=""

    fi

    if in-path "$_cmd" || is-fn "$_cmd" ; then

      [[ "$1" == "$_cmd" ]] && eval "alias -- $1='${_prefix[@]}\\$_cmdln'" || eval "alias -- $1='${_prefix[@]}$_cmdln'"

    else

      fn-trace "Skip alias \"$1\" requested for not installed \"$_cmd\"."
      return 0

    fi

  else

    fn-usage "<alias> [{var=\"val\"}] \"<cmd>\""

  fi
}

if in-path pdfgrep ; then

  pdfgrep() {
    /usr/bin/pdfgrep "$@" | sed -r 's/ +/ /g' | m
  }

fi

ssh-loadkey() {
  local _key
  [[ "$1" =~ / ]] && _key="$1" || _key="$HOME/.ssh/$1"

  if [[ $# -eq 1 && -s "$_key" ]] ; then

    [[ "$(cat /proc/$SSH_AGENT_PID/comm 2>/dev/null)" == ssh-agent ]] || eval "$(ssh-agent)"

    if [[ "$(file "$_key")" =~ private\ key ]] ; then

      if grep -q "$(cat "$_key.pub")" <<<"$(ssh-add -L)" ; then

        fn-info "Private key \"${_key##*/}\" is already lodead."

      else

        ssh-add "$_key"

      fi

    else

      fn-error "Private key \"${_key##*/}\" is not a valid private key."

    fi

  else

    fn-usage "<private-ssh-key>"

  fi
}

_complete-ssh-keys() {
  [ "${#COMP_WORDS[@]}" == 2 ] || return
  COMPREPLY=($(compgen -W "$(find ~/.ssh/ -type f -prune | xargs -r file | sed -rn 's~^.*/([^/]+): .* private key$~\1~p')" -- "${COMP_WORDS[1]}"))
}
complete -F _complete-ssh-keys ssh-loadkey

watch-open-files() (
  if [ $# -gt 0 ] ; then

    _open-files() {
      local _pids
      _pids="$(pidof "$@")"

      if [ -n "$_pids" ] ; then

        local -a _fd
        if [[ "$_pids" =~ ^[[:digit:]]+$ ]] ; then
          _fd=("/proc/$_pids/fd")
        else
          _fd=($(eval "echo /proc/{$(tr ' ' , <<<"$_pids")}/fd"))
        fi

        find "${_fd[@]}" -xtype f ! -lname /memfd:\* -printf '%l\000' | sort -zu | xargs -0r ls -lt

      else
        fn-error "No active processes found!"
      fi
    }
    export -f _open-files

    watch -n 1 -c -d _open-files "$@"

  else

    fn-usage "<procname> .."

  fi
)
complete -A command watch-open-files
