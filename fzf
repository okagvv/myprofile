# -*- shell-script -*-

in-path fzf || return 0

FZF_DEFAULT_OPTS="--border rounded --border-label-pos 3 --list-border rounded --list-label-pos 3 --preview-label-pos 3 --no-mouse --info=inline --bind 'esc:cancel,alt-up:preview-up,alt-down:preview-down,alt-left:preview-page-up,alt-right:preview-page-down,home:first,end:last,f2:toggle-hscroll,f3:toggle-preview-wrap,f4:change-preview-window(70%|60%|50%|40%)+refresh-preview,f5:toggle-preview,f7:preview-half-page-up,f8:preview-half-page-down,f9:preview-top,f10:preview-bottom' --history-size 100 --highlight-line --info-command='echo \$FZF_POS/\$FZF_INFO' --exact --ignore-case"
export FZF_HISTORY_DIR="$HOME/.config/fzf"
[ -d $FZF_HISTORY_DIR ] || mkdir -p $FZF_HISTORY_DIR

if [[ "$(id -u)" == "0" ]] ; then

  export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --color=light,fg:0,bg:#ffdfdf,hl:33,fg+:0,bg+:#ffcdcd,hl+:33,info:33,prompt:33,pointer:166,marker:166,spinner:33"

else

  export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --color=light,fg:240,bg:230,hl:33,fg+:241,bg+:221,hl+:33,info:33,prompt:33,pointer:166,marker:166,spinner:33"

fi

_fzf_comprun () {
  # S.a. https://github.com/junegunn/fzf?tab=readme-ov-file#customizing-fzf-options-for-completion
  local cmd=$1
  shift

  case "$cmd" in
        cd) fzf --preview "tree -C -d -L 5 {} | head -200" "$@" ;;
    export|\
     unset) fzf --preview "eval 'echo \$'{}" "$@" ;;
         *) fzf --preview "bat -n --color=always {}" "$@" ;;
  esac
}

_fzf-query-history () {
  echo "--history $FZF_HISTORY_DIR/${FUNCNAME[${1:--1}]}.history"
}

_fzf-preview-bat() {
  bat --color=always --terminal-width $FZF_PREVIEW_COLUMNS "$@"
}

_fzf-preview-path() {
  local _mime _size
  _mime="$(file --brief --mime "$1")"
  _size="$(du -sh "$1" | cut -f1)"

  _fzf-preview-header "Path \"$1\""
  cat <<EOF | tr -s " " | column -t -d -s":" -l2 -o":" -C right
Type: $_mime
$(stat --printf "Size: %s ($_size)\nPermisson: %a (%A)\nContext: %C\nAccessed: %x\nModified: %y\nChanged: %z\nCreated: %w\n" "$1")
RPM: $(rpm-owner --short "$1" | sed -r 's/^.*(is not owned by any package).*$/\1/')
EOF

  if [[ -r "$1" && -s "$1" ]] ; then
    case "$_mime" in
      *audio*|*video*) _fzf-preview-header; ffprobes --yaml "$1";;
      *rpm*) _fzf-preview-header; rpm -qip "$1";;
      *text*) _fzf-preview-bat "$1";;
      *zip*|*java-archive*) _fzf-preview-header; unzip -l "$1";;
    esac
  fi
}

_fzf-preview-header() {
  [ -z "$1" ] || echo "$1"
  printf "%*s" ${FZF_PREVIEW_COLUMNS:-${#1}} | sed 's/ /â”ˆ/g'
  echo
}

_fzf-help() {
  _fzf-preview-header "fzf key bindings"
  ( echo "
ESC:Cancel.
Tab:Toggle selection for current match.
F1:This help.
F2:Toggle horizontal scroll to match.
F3:Toggle line wrap for preview.
F4:Step through preconfigured preview widths.
F5:Toggle preview.
F7:Preview half page up.
F8:Preview half page down.
F9:Preview top.
F10:Preview bottom.
Alt-Left:Preview page up.
Alt-Right:Preview page down.
Alt-Up:Preview line up.
Alt-Down:Preview line down.
Ctrl-p:Search history up.
Ctrl-n:Search history down.
Home:First match.
End:Last match.
$(if [ -n "$1" ] ; then echo -; sed -r 's/;/.\n/g' <<<"$1;" | sort -V; fi)"
  ) | column -t -s: -o": " | sed 's/^- *://'
}

export -f _fzf-preview-header _fzf-preview-bat _fzf-preview-path _fzf-help _fzf-query-history

_fzf-wrapper() {
  # args: help text for function specific bindings, key for initial preview, initial preview, preview window
  # CAUTION: F1 binds ".."+preview-bottom" to fix help screen by repeated F1 press. Otherwise not
  # help content might be incomplete if --preview-window uses [:+SCROLL[OFFSETS][/DENOM]] values.
  fzf --bind "f1:show-preview+change-preview(_fzf-help \"$1\")+preview-bottom" \
      --bind "$2:show-preview+change-preview($3)" \
      --preview "$3" \
      --preview-window "$4" \
      --history "$FZF_HISTORY_DIR/${FUNCNAME[-1]}.history" \
      "${@: 5}"
}

fzf-fn() {
  local _re _defs
  local -a _fns

  if [[ $# -eq 1 ]] ; then

    case "$1" in
      all) _re=".*";;
       ~*) _re="${1#*~}";;
        *) _re="^$1$";;
    esac

    _fns=($(declare -F | sed -rn 's/^declare -fx? ([[:print:]]+)$/\1/;/'"$_re"'/p'))

    if [ ${#_fns[@]} -eq 1 ] ; then

      declare -f ${_fns[0]}

    elif [ ${#_fns[@]} -gt 1 ] ; then

      _defs="$(mktemp --suffix=.fundef)"
      declare -f ${_fns[@]} >"$_defs"

      echo ${_fns[@]} | \
      tr ' ' '\n' | \
      _fzf-wrapper "Alt-f:Show definition of selected function" "alt-f" "awk '/^{1} \(\)/,/^\}/' $_defs" "70%,+{2}+2/2,~2:wrap" \
                   --bind "enter:become(echo declare -f {1})" \
                   --list-label " Bash function(s) " \
                   --no-sort \
                   --preview-label " Function definition " || true

      rm -f "$_defs"

    fi
  fi

  [ ${#_fns[@]} -gt 0 ] || fn-usage "<function>|all|~regexp"
}
complete -A function fzf-fn

fzf-apply() {
  local _find _query _root

  while [ $# -gt 0 ] ; do
    case "$1" in
      -q|--query) _query="$2"; shift;;
       -r|--root) _root="$2"; shift;;
               *) break;;
    esac
    shift
  done

  if [ $# -gt 0 ] ; then

    _find="find "${_root:-.}" -name .git -prune -o -print0"

    $_find |& \
    _fzf-wrapper "Alt-p:Path info;Enter:Apply command to selected paths" "alt-p" "_fzf-preview-path {}" "60%,~2:wrap" \
                 --bind "enter:execute($* {+} || true; read -s -p \"Press ENTER to return.\")+reload($_find)" \
                 --border-label " Each ENTER calls \"$*\" for selected argument(s). " \
                 --border-label-pos "2:bottom" \
                 --multi \
                 --no-sort \
                 --read0 \
                 --query "$_query"

  else

    fn-usage "<cmd> [--query \"text\"] [--root dir] [<args>]
Sample:
\$ $FUNCNAME rm -iv"

  fi
}

if in-path locate ; then

  fzf-locate() {
    if [ $# -gt 0 ] ; then

      plocate "$@" | \
      _fzf-wrapper "Alt-f:Path info" "alt-f" "_fzf-preview-path {}" "50%,~2:wrap" \
                   --border none \
                   --list-label " plocate $* " \
                   --multi \
                   --preview-label " File info " \
                   --print0 | \
      xargs -0 -r -i@ echo -n '"@" '
      echo

    else
      fn-usage "<locate args>"
    fi
  }

fi

if in-path man ; then

  fzf-man() {
    # s.a. https://github.com/junegunn/fzf/wiki/examples#man-pages
    # CAUTION: "man --warnings=!font" is used to suppress troff warnings triggered by obsolete
    # fonts referenced in some manual pages.
    man -k . | \
    sort | \
    sed -r 's/\) *- */\)~/' | \
    column -t -s"~" -l2 | \
    _fzf-wrapper "Alt-m:Manual page" \
                 "alt-m" $'echo {} | tr -d \'()\' | awk \'{printf "%s ", $2} {print $1}\' | xargs -r man --warnings="!font"' \
                 "60%,~2:wrap" \
                 --border-label "Manual pages" \
                 --multi \
                 --query "$1" \
                 --prompt='man> ' | \
    tr -d '()' | \
    awk '{printf "%s ", $2} {print $1}' | \
    xargs -r man # '
  }

fi

fzf-ps() {
  # TODO: Select via option from several ps columns sets.
  # CAUTION: Some default column widths in ps output are unbalanced. Fixing this by configuring
  # fixed column widths causes waste of horizontal space.
  # High --hscroll-off value ensures that a match in a long command line is visible. With "h" the
  # effect of --hscroll-off can be toggled. In addition a preview window containg the wraped line
  # can be toggled on demand via "?".
  local _ps
  _ps="ps aux --sort=-%cpu | column -t -l 11"
  eval "$_ps" | \
  fzf --bind="ctrl-r:reload(eval \"$_ps\")" \
      --border-label " Output of \"$_ps\". CTRL-R reloads process list. " \
      $(_fzf-query-history) \
      --header-lines 1 \
      --hscroll-off=800 \
      --list-border none \
      --multi \
      --no-sort \
      --preview 'echo {}' \
      --preview-window "down:3:hidden:wrap" \
      --query "$1" \
      --reverse
}

if in-path rg ; then

  fzf-rg() {
    # inspired by https://github.com/junegunn/fzf/blob/master/ADVANCED.md#ripgrep-integration

    if [ $# -gt 0 ] ; then

      local _editor_args
      # It is assumed that $EDITOR is set to "vim" or "emacsclient".
      [[ "$EDITOR" == vim ]] && _editor_args="{1} +{2}" || _editor_args="+{2} {1}"

      rg --color=always --hidden --line-number --no-heading --smart-case "$*" | \
      _fzf-wrapper "Alt-f:Show match in preview window;Enter:Load file into editor" "alt-f" \
                   "_fzf-preview-bat --highlight-line {2} {1}" "up,60%,border-bottom,+{2}+3/3,~3:wrap" \
                   --ansi \
                   --bind "enter:execute($EDITOR $_editor_args)" \
                   --border-label " Each ENTER opens selected file in editor with cursor on matching line. " \
                   --border-label-pos "3:bottom" \
                   --color "hl:-1:underline,hl+:-1:underline:reverse" \
                   --delimiter : \
                   --extended \
                   --list-border none \
                   --no-multi \
                   --smart-case

    else
      fn-usage "<ripgrep args>"
    fi
  }

fi
