# -*- shell-script -*-

in-path fzf || return 0

_fzf_comprun () {
  # S.a. https://github.com/junegunn/fzf?tab=readme-ov-file#customizing-fzf-options-for-completion
  local cmd=$1
  shift

  case "$cmd" in
        cd) fzf --preview "tree -C -d -L 5 {} | head -200" "$@" ;;
    export|\
     unset) fzf --preview "eval 'echo \$'{}" "$@" ;;
         *) fzf --preview "bat -n --color=always {}" "$@" ;;
  esac
}

fzf-fn() (
  local _re _defs
  local -a _fns

  if [[ $# -eq 1 ]] ; then

    case "$1" in
      all) _re=".*";;
       ~*) _re="${1#*~}";;
        *) _re="^$1$";;
    esac

    _fns=($(declare -F | sed -rn 's/^declare -fx? ([[:print:]]+)$/\1/;/'"$_re"'/p'))

    if [ ${#_fns[@]} -eq 1 ] ; then

      declare -f ${_fns[0]}

    elif [ ${#_fns[@]} -gt 1 ] ; then

      _defs="$(mktemp --suffix=.fundef)"
      declare -f ${_fns[@]} >"$_defs"

      myprofile _fzf

      echo ${_fns[@]} | \
      tr ' ' '\n' | \
      _fzf-wrapper --bind "enter:become(echo declare -f {1})" \
                   --help "Alt-f:Show definition of selected function" \
                   --list-label " Bash function(s) " \
                   --no-sort \
                   --preview-init "alt-f:awk '/^{1} \(\)/,/^\}/' $_defs" \
                   --preview-label " Function definition " \
                   --preview-window "70%,+{2}+2/2,~2:wrap" || true

      rm -f "$_defs"

    fi
  fi

  [ ${#_fns[@]} -gt 0 ] || fn-usage "<function>|all|~regexp"
)
complete -A function fzf-fn

fzf-apply() (
  local _find _query _root

  while [ $# -gt 0 ] ; do
    case "$1" in
      -q|--query) _query="$2"; shift;;
       -r|--root) _root="$2"; shift;;
               *) break;;
    esac
    shift
  done

  if [ $# -gt 0 ] ; then

    myprofile _fzf

    _find="find-beyond-git ${_root:-.} -type f -printf %P\\0"

    $_find |& \
    _fzf-wrapper --bind "enter:execute($* {+} || true; read -s -p \"Press ENTER to return.\")+reload($_find)" \
                 --border-label " Each ENTER calls \"$*\" for selected argument(s). " \
                 --border-label-pos "2:bottom" \
                 --help "Alt-p:Path info;Enter:Apply command to selected paths" \
                 --multi \
                 --no-sort \
                 --preview-init "alt-p:_fzf-preview-path {}" \
                 --preview-window "60%,~2:wrap" \
                 --query "$_query" \
                 --read0

  else

    fn-usage "<cmd> [--query \"text\"] [--root dir] [<args>]
Sample:
\$ $FUNCNAME rm -iv"

  fi
)

in-path locate && \
fzf-locate() (
  if [ $# -gt 0 ] ; then

    myprofile _fzf

    plocate "$@" | \
    _fzf-wrapper --border none \
                 --help "Alt-f:Path info" \
                 --list-label " plocate $* " \
                 --multi \
                 --preview-init "alt-f:_fzf-preview-path {}" \
                 --preview-label " File info " \
                 --preview-window "60%,~2:wrap" \
                 --print0 | \
    xargs -0 -r -i@ echo -n '"@" '
    echo

  else
    fn-usage "<locate args>"
  fi
)

in-path man && \
fzf-man() (
  _fzf-man() {
    # CAUTION: "man --warnings=!font" is used to suppress troff warnings triggered by obsolete
    # fonts referenced in some manual pages.
    man --warnings="!font" $(tr -d '()' <<<"$2") "$1"
  }
  export -f _fzf-man

  myprofile _fzf

  man -k "${1:-.}" | \
  sort | \
  sed -r 's/\) *- */\)~/' | \
  column -t -s"~" -l2 | \
  _fzf-wrapper --border-label "Manual pages" \
               --help "Alt-m:Manual page;Enter:Show selected manual page(s)" \
               --multi \
               --no-sort \
               --query "$1" \
               --preview-init "alt-m:_fzf-man {1} {2}" \
               --preview-window "60%,~2:wrap" \
               --reverse | \
  tr -d '()' | \
  awk '{printf "%s ", $2} {print $1}' | \
  xargs -r man # '
)

fzf-ps() (
  # TODO: - Select via option from several ps columns sets.
  #       - Apply _fzf-wrapper().
  myprofile _fzf

  local _ps
  _ps="ps aux --sort=-%cpu | column -t -l 11"
  eval "$_ps" | \
  fzf --bind "ctrl-r:reload(eval \"$_ps\")" \
      --bind "alt-i:show-preview+change-preview(echo {11..-1} | sed -r 's/ +-/\n-/g')" \
      --bind "alt-p:toggle-preview" \
      --bind "alt-d:show-preview+change-preview(pidstat -d --human -p {2} 1)" \
      --bind "alt-r:show-preview+change-preview(pidstat -r --human -p {2} 1)" \
      --bind "alt-s:show-preview+change-preview(pidstat -s -p {2} 1)" \
      --bind "alt-u:show-preview+change-preview(pidstat -u -I -p {2} 1)" \
      --bind "alt-v:show-preview+change-preview(pidstat -v -p {2} 1)" \
      --bind "alt-w:show-preview+change-preview(pidstat -w -p {2} 1)" \
      --border-label " Output of \"$_ps\". CTRL-R reloads process list. " \
      $(_fzf-query-history) \
      --header-lines 1 \
      --hscroll-off=800 \
      --list-border none \
      --multi \
      --no-sort \
      --preview "echo {11..-1} | sed -r 's/ +-/\n-/g'" \
      --preview-window "50%,~3:hidden:wrap:follow" \
      --query "$1" \
      --reverse
)

in-path rg && \
fzf-rg() (
  # inspired by https://github.com/junegunn/fzf/blob/master/ADVANCED.md#ripgrep-integration

  if [ $# -gt 0 ] ; then

    local _editor_args
    # It is assumed that $EDITOR is set to "vim" or "emacsclient".
    [[ "$EDITOR" == vim ]] && _editor_args="{1} +{2}" || _editor_args="+{2} {1}"

    myprofile _fzf

    rg --color=always --hidden --line-number --no-heading --smart-case "$*" | \
    _fzf-wrapper --ansi \
                 --bind "enter:execute($EDITOR $_editor_args)" \
                 --border-label " Each ENTER opens selected file in editor with cursor on matching line. " \
                 --border-label-pos "3:bottom" \
                 --color "hl:-1:underline,hl+:-1:underline:reverse" \
                 --delimiter : \
                 --extended \
                 --help "Alt-f:Show match in preview window;Enter:Load file into editor" \
                 --list-border none \
                 --no-multi \
                 --preview-init "alt-f:_fzf-preview-bat --highlight-line {2} {1}" "+change-preview-window(+{2})" \
                 --preview-window "up,60%,border-bottom,+{2}+3/3,~3:wrap" \
                 --smart-case

  else
    fn-usage "<ripgrep args>"
  fi
)
