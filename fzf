# -*- shell-script -*-

in-path fzf || return 0

# if packaged for RH derivates the default bash key bindings are not contained in bash completion for fzf
[ -s /usr/share/fzf/shell/key-bindings.bash ] && source /usr/share/fzf/shell/key-bindings.bash

_fzf_comprun () {
  # S.a. https://github.com/junegunn/fzf?tab=readme-ov-file#customizing-fzf-options-for-completion
  local cmd=$1
  shift

  case "$cmd" in
        cd) fzf --preview "tree -C -d -L 5 {} | head -200" "$@" ;;
    export|\
     unset) fzf --preview "eval 'echo \$'{}" "$@" ;;
         *) fzf --preview "bat -n --color=always {}" "$@" ;;
  esac
}

fzf-fn() (
  local _re _defs
  local -a _fns

  if [[ $# -eq 1 ]] ; then

    case "$1" in
      all) _re=".*";;
       ~*) _re="${1#*~}";;
        *) _re="^$1$";;
    esac

    _fns=($(declare -F | sed -rn 's/^declare -fx? ([[:print:]]+)$/\1/;/'"$_re"'/p'))

    if [ ${#_fns[@]} -eq 1 ] ; then

      declare -f ${_fns[0]}

    elif [ ${#_fns[@]} -gt 1 ] ; then

      _defs="$(mktemp --suffix=.fndef)"
      declare -f ${_fns[@]} >"$_defs"

      myprofile _fzf

      echo ${_fns[@]} | \
      tr ' ' '\n' | \
      _fzf-wrapper --bind "alt-e:execute(_fzf-editor $_defs.curr)" \
                   --bind "enter:become(echo declare -f {1})" \
                   --help 'Alt-e:Send current function definition to \$EDITOR;Alt-f:Show definition of selected function' \
                   --list-label " Bash function(s) " \
                   --no-sort \
                   --preview-init "alt-f:awk '/^{1} \(\)/,/^\}/' $_defs | tee $_defs.curr | bat --color always --number --language bash" \
                   --preview-label " Function definition " \
                   --preview-window "70%,+{2}+2/2,~2:wrap" || true

      rm -f "$_defs"

    fi
  fi

  [ ${#_fns[@]} -gt 0 ] || fn-usage "<function>|all|~regexp"
)
complete -A function fzf-fn

fzf-apply() (
  local _query _root _sort _find
  _root="$(pwd)"
  _sort=path

  while [ $# -gt 0 ] ; do
    case "$1" in
      -q|--query) _query="$2"; shift;;
       -r|--root) _root="$2"; shift;;
       -s|--sort) _sort="$2"; shift;;
               *) break;;
    esac
    shift
  done

  if [ $# -gt 0 ] ; then

    myprofile _fzf

    cd "$_root" || fn-abort "Change directory to \"$_root\" failed!"
    export _root _sort

    _find-apply() {
      _fzf-find . f %P $_sort
    }
    export -f _find-apply

    _find-apply | \
    _fzf-wrapper --bind "ctrl-a:toggle-all" \
                 --bind "enter:execute($* {+} || true; read -s -p \"Press ENTER to return.\"; echo)+reload(_find-apply)" \
                 --border-label "[ Each ENTER calls \"$*\" for selected argument(s) ]" \
                 --color "label:reverse" \
                 --exit-0 \
                 --help "Ctrl-a:Toggle all selections;Enter:Apply command to selected paths" \
                 --multi \
                 --no-sort \
                 --preview "_fzf-preview-path {}" \
                 --preview-window "70%,~2:wrap" \
                 --query "$_query" \
                 --read0 \
                 --reverse \
                 --smart-case

  else

    fn-usage "[--query \"text\"] [--root dir] [--sort date|name|path|size] <cmd> [{<arg>}]
Sample:
\$ $FUNCNAME rm -iv"

  fi
)

if in-path plocate ; then \

  fzf-locate() (
    if [ $# -gt 0 ] ; then

      myprofile _fzf

      plocate "$@" | \
      _fzf-wrapper --bind "ctrl-a:toggle-all" \
                   --bind "alt-e:execute(_fzf-editor {})" \
                   --border none \
                   --exit-0 \
                   --help "Alt-e:Open selected file in \\\$EDITOR;Ctrl-a:Toggle all selections" \
                   --list-label "[ plocate $* ]" \
                   --multi \
                   --no-sort \
                   --preview "_fzf-preview-path {}" \
                   --preview-window "70%,~2:wrap" \
                   --print0 \
                   --reverse \
                   --smart-case | \
      xargs -0 -r -i@ echo -n '"@" '
      echo

    else
      fn-usage "<locate args>"
    fi
  )

  complete -W "--{basename,ignore-case,regexp}" fzf-locate

fi

if in-path man ; then

  fzf-man() (
    local -a _args
    while [ $# -gt 0 ] ; do
      case "$1" in
        -a|--apropos) _args+=(--apropos);;
          -r|--regex) _args+=(--regex);;
         -w|--whatis) _args+=(--whatis);;
         -s|--search) _args+=(--path --global-apropos);;
           -h|--help) fn-usage "[--help] [--regexp] --apropos | --search | --whatis [--] pattern"; return 0;;
                  --) shift; _args+=("$*"); break;;
                  -*) fn-error "Unsupported option: $1"; return 1;;
                   *) _args+=("$1");;
      esac
      shift
    done

    [ ${#_args[@]} -gt 0 ] || _args=(.)
    [[ "${_args[0]}" =~ ^- ]] || _args=(--apropos "${_args[@]}")

    _fzf-man() {
      # CAUTION: "man --warnings=!font" is used to suppress troff warnings triggered by obsolete
      # fonts referenced in some manual pages.
      man --warnings="!font" $(tr -d '()' <<<"$2") "$1" | \
      bat --color always --style plain --language man
    }
    export -f _fzf-man

    myprofile _fzf

    { if [[ "${_args[@]}" =~ --path\ --global-apropos ]] ; then
        man --apropos $(man "${_args[@]}" | sed -r 's~^.+/([^[:space:]]+)\.[[:digit:]]+\.[[:alnum:]]+$~\1~')
      else
        man "${_args[@]}"
      fi
    } | \
    sort | \
    sed -r 's/\) *- */\)~/' | \
    column -t -s"~" -l2 | \
    _fzf-wrapper --bind 'enter:execute(man $(tr -d "()" <<<{2}) {1})' \
                 --border-label "[ Manual pages ]" \
                 --color "label:reverse" \
                 --exit-0 \
                 --help "Enter:Browse selected manual page" \
                 --no-multi \
                 --no-sort \
                 --preview "_fzf-man {1} {2}" \
                 --preview-window "70%,~2:wrap" \
                 --reverse \
                 --smart-case
  )

  complete -W "--{apropos,regex,search,whatis}" fzf-man

fi

fzf-ps() (
  # TODO: - Select via option from several ps columns sets.
  #       - Apply _fzf-wrapper().
  myprofile _fzf

  local _ps
  _ps="ps aux --sort=-%cpu"
  eval "$_ps | column -t -l 11" | \
  _fzf-wrapper --bind "ctrl-r:reload(eval \"$_ps\")" \
               --bind "alt-d:change-preview(pidstat -d --human -p {2} 1)+change-preview-label([ IO stats ])" \
               --bind "alt-e:change-preview(grep -zvE '^(BASH_FUNC|LS_COLORS=|PS1=)' </proc/{2}/environ | sort -z | tr '\0' '\n')" \
               --bind "alt-r:change-preview(pidstat -r --human -p {2} 1)+change-preview-label([ Memory utilization ])" \
               --bind "alt-s:change-preview(pidstat -s -p {2} 1)+change-preview-label([ Stack utilization ])" \
               --bind "alt-u:change-preview(pidstat -u -I -p {2} 1)+change-preview-label([ CPU utilization ])" \
               --bind "alt-v:change-preview(pidstat -v -p {2} 1)+change-preview-label([ Kernel table values ])" \
               --bind "alt-w:change-preview(pidstat -w -p {2} 1)+change-preview-label([ Task switching activity ])" \
               --border-label "[ Output of \"$_ps\" ]" \
               --color "label:reverse" \
               --header-lines 1 \
               --help "Ctrl-r:Refresh ps output;Alt-e:List process environment;Alt-i:Show full command-line;Alt-d:IO stats
                       Alt-r:Memory utilization;Alt-s:Stack utilization;Alt-u:CPU utilization;Alt-v:Kernel table values
                       Alt-w:Task switching activity" \
               --hscroll-off=800 \
               --list-border none \
               --multi \
               --no-sort \
               --preview-init "alt-i:echo {11..-1} | sed -r 's/ +-/\n-/g'" \
               --preview-window "50%,~3:hidden:wrap:follow" \
               --query "$1" \
               --reverse
)

in-path rg && \
fzf-rg() (
  # inspired by https://github.com/junegunn/fzf/blob/master/ADVANCED.md#ripgrep-integration

  if [ $# -gt 0 ] ; then

    myprofile _fzf

    rg --color=always --hidden --line-number --no-heading --smart-case "$*" | \
    _fzf-wrapper --ansi \
                 --bind "enter:execute(_fzf-editor {1} {2})" \
                 --bind 'zero:execute(echo "No matches found!")+abort' \
                 --bind 'change:unbind(zero)' \
                 --border-label "[ Each ENTER opens selected file in editor with cursor on matching line ]" \
                 --border-label-pos "3:bottom" \
                 --color "label:reverse" \
                 --delimiter : \
                 --extended \
                 --help "Enter:Load file into editor" \
                 --list-border none \
                 --no-multi \
                 --preview "_fzf-preview-bat --highlight-line {2} {1}" \
                 --preview-window "up,60%,border-bottom,+{2}+3/3,~3:wrap" \
                 --smart-case

  else
    fn-usage "<ripgrep args>"
  fi
)

fzf-data() (
  # derived from https://github.com/denisidoro/dotfiles/blob/master/scripts/javascript/nav
  if [[ "${1,,}" =~ \.(json|ya?ml)$ ]] ; then

    myprofile _fzf

    #export fn_trace=y
    export _data="$1"
    export _jq="gojq --raw-output"
    export _bat="bat --style plain --color always"

    # CAUTION: "gojq .. --color-output" has no effect for --yaml-output, i.e. "bat" will be used for
    # YAML and JSON.
    if [[ "${_data,,}" =~ \.ya?ml$ ]] ; then
      _jq+=" --yaml-input --yaml-output"
      _bat+=" --language yaml"
    else
      _bat+=" --language json"
    fi

    _data-preview() {
      local _i _q
      _i="$1"

      grep -q "^\." <<<"$_i" || _i=".$_i"
      grep -q "^\. = "  <<<"$_i" && _q="." || _q="$(sed -r 's/(\.[^ ]+).*/\1/;s/\.([^\.\[\"]+)/."\1"/g' <<<"$_i")"

      [ -z "$2" ] || _fzf-preview-header "$_q"
      fn-trace "_i=\"$1\" -> \"$_i\"\n_q=\"$_q\""

      $_jq "$_q" "$_data" | $_bat
    }
    export -f _data-preview

    $_jq '[path(..)|map(if type=="number" then "[]" else tostring end)|join(".")|split(".[]")|join("[]")]|unique|map("."+.)|.[]' "$_data" | \
    sed '/^---$/d' | \
    _fzf-wrapper --ansi \
                 --bind "alt-c:execute-silent(_data-preview {} | _fzf-copy)" \
                 --bind "enter:execute(_data-preview {})" \
                 --border-label "[ $1 ]" \
                 --exit-0 \
                 --help "Alt-c:Copy preview to clipboard;Enter:Load selected key into pager" \
                 --list-border none \
                 --no-multi \
                 --preview "_data-preview {} header" \
                 --preview-window "60%,~2:wrap" \
                 --reverse

  else
    fn-usage "file.(json|yaml)"
  fi
)
