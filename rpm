# -*- shell-script -*-

_rpm-inspect-scope() {
  rpm --query --$1 "$2" | \
  fzf --border none \
      --list-label " ${1^} in package \"$2\" " \
      --multi \
      --preview '_fzf-preview-header {}; less {} | bat -n --color=always --file-name={}' \
      --preview-window '60%:~2:wrap' \
      $(_fzf-query-history 2) | \
  xargs -r
}

rpm-changelog() {
  [ $# -eq 1 ] && _rpm-inspect-scope changelog "$1" || fn-usage "<package>"
}

rpm-conf() {
  [ $# -eq 1 ] && _rpm-inspect-scope configfiles "$1" || fn-usage "<package>"
}

rpm-docs() {
  [ $# -eq 1 ] && _rpm-inspect-scope docfiles "$1" || fn-usage "<package>"
}

_rpm-preview-docs() {
  _fzf-preview-header "${1^} doc file for package \"$2\""

  local -a _patterns
  case "$1" in
    changelog) _patterns=(changelog release news changes announce);;
            *) _patterns=(readme);;
  esac

  local _docs _pattern _log
  _docs="$(rpm --query --docfiles "$2")"

  if [ ${#_docs[@]} -gt 0 ] ; then

    for _pattern in "${_patterns[@]}" ; do

      _log="$(grep -i -E "/[^/]*$_pattern[^/]*$" <<<"$_docs" | head -1)"

      if [[ -n "$_log" && -s "$_log" ]] ; then

        _fzf-preview-bat "$_log"
        return 0

      fi
    done

    echo "No non-empty ${1^} file identified in package doc files."

  else

    echo "Package contains no doc files!"

  fi
}

_rpm-preview-what() {
  local _what
  _fzf-preview-header "What packages relate to \"$1\""
  for _what in enhances recommends requires suggests supplements ; do
    echo -e "What $_what:\n$(rpm --query --what$_what "$1" | sed '/^no package /q;s/^/- /')\n"
  done
}

_rpm-preview() {
  _fzf-preview-header "$1 package \"$3\""
  rpm --query $2 "$3"
}

_rpm-preview-files() {
  _fzf-preview-header "$1 package \"$3\""
  rpm --query $2 --verbose "$3" | \
  column --table --table-columns-limit 6 --table-right 1,5 2>/dev/null
}

export -f _rpm-preview _rpm-preview-docs _rpm-preview-files _rpm-preview-what

_fzf-rpm() {
  local _nvr
  _nvr="{-3}-{-2}.{-1}"

  _fzf-wrapper --bind="alt-c:change-preview(_rpm-preview-files \"Config files in\" --configfiles $_nvr)" \
               --bind="alt-d:change-preview(_rpm-preview-files \"Doc files in\" --docfiles $_nvr)" \
               --bind="alt-f:change-preview(_rpm-preview-files \"Files in\" -l $_nvr)" \
               --bind="alt-i:change-preview(_rpm-preview \"Info for\" -i $_nvr)" \
               --bind="alt-r:change-preview(_rpm-preview-docs readme $_nvr)" \
               --bind="alt-s:change-preview(_rpm-preview \"Scripts in\" \"--scripts --triggers\" $_nvr)" \
               --bind="alt-u:change-preview(_rpm-preview-docs changelog $_nvr)" \
               --bind="alt-v:change-preview(_rpm-preview \"Verify files of\" \"--verify --verbose\" $_nvr)" \
               --bind='alt-w:change-preview(_rpm-preview-what {-3})' \
               --bind 'enter:become(echo {+-3})' \
               --border-label " $1 " \
               --help "Alt-c:Config files;Alt-d:Doc files;Alt-f:Package files;Alt-i:Package info;Alt-l:Changelog;Alt-r:Readme;Alt-s:Scripts;Alt-u:Upstream changelog;Alt-v:Verify;Alt-w:What requires ." \
               --list-label " Matching packages " \
               --multi \
               --no-sort \
               --preview-init "alt-l:_rpm-preview \"Changelog of\" --changelog $_nvr" \
               --preview-label " Press F1 for help " \
               --preview-window "60%,~2:wrap" \
               --query "$2" \
               --reverse | \
  xargs -r
}

rpm-history() {
  LC_TIME=POSIX rpm --query --all --queryformat '%{INSTALLTIME} %{INSTALLTIME:date}*%{NAME}*%{VERSION}-%{RELEASE}*%{ARCH}\n' 2>&1 | \
  sort --reverse | \
  cut --characters=12- | \
  column --table --separator "*" | \
  _fzf-rpm "Package install history" "$(sed -r 's/[[:space:]]+/ \| /g' <<<"$*")"
}

rpm-info() {
  rpm -qa --query --all --queryformat '%{NAME} %{VERSION}-%{RELEASE} %{ARCH}\n' "$@" | \
  sort | \
  _fzf-rpm "Installed packages"
}

rpm-owner() {
  local _f __f _long

  if [[ "$1" =~ ^-+s(hort)?$ ]] ; then
    shift
  else
    _long=y
  fi

  if [ $# -gt 0 ] ; then

    for _f in "$@" ; do

      [[ -e "$_f" || "$_f" = /* ]] && __f="$_f" || __f="$(/usr/bin/which "$_f" 2>/dev/null)"
      [[ -z "$__f" ]] && __f="$_f"

      echo "${_long:+$__f: }$(rpm --query --file --qf '%{NAME}-%{VERSION}.%{ARCH}\n' "$__f" 2>/dev/null)"

    done

  else
    fn-usage "file .."
  fi
}
export -f rpm-owner

rpm-status() {
  if [ $# -gt 0 ] ; then
    rpm --query --list --state --verbose "$@" 2>&1 | m
  else
    fn-usage "package .."
  fi
}

rpm-verify() {
  if [ $# -gt 0 ] ; then
    rpm --verify --verbose "$@" 2>&1 | m
  else
    fn-usage "package .."
  fi
}

rpm-freshen() {
  if [ $# -gt 0 ] ; then
    sudo rpm --freshen --verbose --hash "$@" 2>&1 | m
  else
    fn-usage "rpmfile"
  fi
}
