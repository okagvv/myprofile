# -*- shell-script -*-

in-path ffmpeg || return 0

{
  local _ff
  for _ff in ff{mpeg,play,probe} ; do
    new-alias "$_ff" "$_ff -hide_banner"
  done
}

ffprobes() {
  local _input _yaml

  while [ $# -gt 0 ] ; do
    case "$1" in
      -h|--help) fn-usage "[--help] [--yaml] file ..";;
      -y|--yaml) _yaml=y;;
              *) break;;
    esac
    shift
  done

  for _input in "$@" ; do

    if file -i "$_input" 2>/dev/null | grep --silent -E '(audio|video)/' ; then

      if [ -n "$_yaml" ] ; then

        ffprobe -hide_banner -loglevel quiet -of json -pretty -show_error \
                -show_entries "stream=index,codec_long_name,sample_aspect_ratio,display_aspect_ratio,width,height,channel_layout,channels,avg_frame_rate,profile,pix_fmt,level,bit_rate,duration:stream_tags=language,GENERATOR:format=format_long_name,duration,size,bit_rate:format_tags:chapter=start_time,end_time:chapter_tags:stream_disposition=default" \
                -i  "$_input" | \
        gojq --yaml-output '[ .format, .streams[], .programs[], .chapters[] ]' | \
        sed -r '/end_time:/ { N; s/\n// };s/(end_time: "[^"]+") +(.+)$/\2 \1/' | \
        bat --language yaml --color always --paging never --style header-filename --file-name "$_input"
        echo

      else

        ffprobe -hide_banner -i "$_input" |& grep --color=never --extended-regexp '^ *(Input|Duration:|Stream) '

      fi

    else

      fn-error "No audio or video file: $_input"

    fi
  done
}
export -f ffprobes

fzf-ffprobes() (
  # CAUTION: For huge directory trees filtering for audio/video files will slow down loading fzf
  # list input. Use of --all avoids this but may list files not supported by ffprobe a/o vlc.
  local _all _cmd _sort
  while [ $# -gt 0 ] ; do
    case "$1" in
       -a|--all) _all=y;;
      -h|--help) fn-usage "[--help] | [--all] [--play] [--sort date|name] <dir> [<query>]"; return 0;;
      -p|--play) _cmd="vlc";;
      -s|--sort) _sort="$2"; shift;;
              *) break;;
    esac
    shift
  done

  [[ "$_sort" == date ]] && _sort="-k1nr" || _sort="-k2"

  if [[ $# -gt 0 && -d "$1" ]] ; then

    _ffprobes-all() {
      find . -type f -printf "%T@ %P\0" | sort -z "$_sort" | cut -z -d' ' -f2-
    }

    _ffprobes-filter() {
      _ffprobes-all | xargs -r0 file -ni | sed -rn 's~^(.+): +(audio|video)/.*$~\1~p' | tr '\n' '\0'
    }

    _vlc_enqueue() {
      local _winid
      _winid="$(xdotool search --name 'VLC media player')"
      [ -z "$_winid" ] || xdotool windowactivate "$_winid"
      nohup vlc --verbose 0 --playlist-enqueue "$@" &
    }
    export -f _vlc_enqueue

    cd "$1"
    local -a _selected

    IFS=$'\n' _selected=($(myprofile _fzf
                           $([ -n "$_all" ] && echo _ffprobes-all || echo _ffprobes-filter) "$1" | \
                           sort | \
                           IFS=" " _fzf-wrapper --bind "alt-a:clear-selection" \
                                                --bind "alt-v:execute-silent(_vlc_enqueue {+})+clear-selection" \
                                                --bind "enter:accept" \
                                                --border none \
                                                --help "Alt-a:Clear selection;Alt-i:File info;Alt-v:Play current/selected file(s) via VLC" \
                                                --list-label " Audio and video files in \"$(realpath "$1")/\" " \
                                                --multi \
                                                --no-sort \
                                                --preview-init "alt-i:_fzf-preview-path {}" \
                                                --preview-label " ffprobe output " \
                                                --preview-window "60%,~2:wrap" \
                                                --read0 \
                                                --query "$2" \
                                                --reverse))

    [ ${#_selected[@]} -gt 0 ] || return 0

    if [ -n "$_cmd" ] ; then
      $_cmd "${_selected[@]}"
    else
      printf "\"%s\" " "${_selected[@]}"
      echo
    fi

  else

    fn-error "Missing path argument(s)!"

  fi
)
