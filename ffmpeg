# -*- shell-script -*-

in-path ffmpeg || return 0

{
  local _ff
  for _ff in ff{mpeg,play,probe} ; do
    new-alias "$_ff" "$_ff -hide_banner"
  done
}

ffprobes() {
  local _input _yaml

  while [ $# -gt 0 ] ; do
    case "$1" in
      -h|--help) fn-usage "[--help] [--yaml] file ..";;
      -y|--yaml) _yaml=y;;
              *) break;;
    esac
    shift
  done

  for _input in "$@" ; do

    if file -i "$_input" 2>/dev/null | grep --silent -E '(audio|video)/' ; then

      if [ -n "$_yaml" ] ; then

        ffprobe -hide_banner -loglevel quiet -of json -pretty -show_error \
                -show_entries "stream=index,codec_long_name,sample_aspect_ratio,display_aspect_ratio,width,height,channel_layout,channels,avg_frame_rate,profile,pix_fmt,level,bit_rate,duration:stream_tags=language,GENERATOR:format=format_long_name,duration,size,bit_rate:format_tags:chapter=start_time,end_time:chapter_tags:stream_disposition=default" \
                -i  "$_input" | \
        gojq --yaml-output '[ .format, .streams[], .programs[], .chapters[] ]' | \
        sed -r '/end_time:/ { N; s/\n// };s/(end_time: "[^"]+") +(.+)$/\2 \1/' | \
        bat --language yaml --color always --paging never --style header-filename --file-name "$_input"
        echo

      else

        ffprobe -hide_banner -i "$_input" |& grep --color=never --extended-regexp '^ *(Input|Duration:|Stream) '

      fi

    else

      fn-error "No audio or video file: $_input"

    fi
  done
}

if in-path vlc ; then

  vlc-enqueue() {
    local _winid
    _winid="$(xdotool search --name 'VLC media player')"
    [ -z "$_winid" ] || xdotool windowactivate "$_winid"
    nohup vlc --verbose 0 --playlist-enqueue "$@" &
  }

fi

fzf-ffprobes() (
  # CAUTION: For huge directory trees filtering for audio/video files will slow down loading fzf
  # list input. Use of --all avoids this but may list files not supported by ffprobe a/o vlc.
  local _all _play _sort
  while [ $# -gt 0 ] ; do
    case "$1" in
       -a|--all) _all=y;;
      -h|--help) fn-usage "[--help] | [--all] [--play] [--sort date|name|size] <dir> [<query>]"; return 0;;
      -p|--play) _play=y;;
      -s|--sort) _sort="$2"; shift;;
              *) break;;
    esac
    shift
  done

  if [[ $# -gt 0 && -d "$1" ]] ; then

    _ffprobes-all() {
      fdl --type f --no-ignore --header ${_sort:+--sort $_sort}
    }

    _ffprobes-filter() {
      local _fdl _path
      while read -r _fdl ; do
        if [[ "$_fdl" =~ ^Permission ]] ; then
          echo "$_fdl"
        else
          _path="$(cut -d$'\u00a0' -f 7 <<<"$_fdl" | strip_esc)"
          [[ "$(file -E --brief --mime "$_path")" =~ (audio|video) ]] && echo "$_fdl"
        fi
      done <<<"$(_ffprobes-all)"
    }

    export -f vlc-enqueue

    cd "$1"
    myprofile _fzf

    { [ -n "$_all" ] && _ffprobes-all "$1" || _ffprobes-filter "$1"
    } | \
    _fzf-wrapper --ansi \
                 --accept-nth 7 \
                 --bind "alt-a:clear-selection" \
                 --bind "alt-v:execute(vlc-enqueue {+7})+clear-selection" \
                 --bind "enter:$([ -n "$_play" ] && echo "execute(_vlc-enqueue {+7})+abort" || echo "accept")" \
                 --border none \
                 --color "label:reverse" \
                 --delimiter $'\u00a0' \
                 --exit-0 \
                 --header-lines 1 \
                 --help "Alt-a:Clear selection;Alt-i:File info;Alt-v:Play current/selected file(s) via VLC" \
                 --list-label "[ Audio and video files in \"$(realpath "$1")/\" ]" \
                 --multi \
                 --no-sort \
                 --preview-init "alt-i:_fzf-preview-path {7}" \
                 --preview-label "[ File stats and ffprobe output ]" \
                 --preview-window "60%,~2:wrap" \
                 --query "$2" \
                 --print0 \
                 --reverse \
                 --with-nth 6,5,7 | \
    xargs -r0 ls

  else

    fn-error "Missing path argument(s)!"

  fi
)
