# -*- shell-script -*-

new-alias failed 'systemctl list-units --failed'
new-alias list_deps 'systemctl list-dependencies "$(systemctl get-default)"'
new-alias sysmounted 'systemctl --type mount'
new-alias avcrecent sudo 'ausearch -ts recent -m avc'
new-alias avctoday sudo 'ausearch -ts today -m avc'
new-alias avcyesterday sudo 'ausearch -ts yesterday -m avc'
new-alias boot_blame sudo 'systemd-analyze blame'
new-alias boot_times sudo 'systemd-analyze plot | display -'
new-alias dstat sudo 'dstat --time --load --vmstat --net --swap --io'
new-alias iotop sudo 'iotop -a -c -o -P'
new-alias iostat sudo 'iostat -xmt 1'

if ! is-root ; then

  journalctl() { /usr/bin/journalctl --user "$@"; }
  systemctl() { /usr/bin/systemctl --user "$@"; }
  export -f journalctl systemctl

fi

fzf-units() (
  # Iterate over systemd units. Default are all active all system (if called by root user) or user units.
  # args: --priority: only units with journal entries below/equal this prio are considered
  #       --all: consider all installed units
  #       --since: consider journal entries since specified hours
  local _all _hours _listprio _prio
  _hours=24
  while [ $# -gt 0 ] ; do
    case "$1" in
           -a|--all) _all=--all;;
      -p|--priority) _prio="$2"; shift;;
          -h|--help) fn-usage "[--help] [--all | [--since hours] --priority {0..7}|{emerg,alert,crit,err,warning,notice,info,debug}] pattern"; return 0;;
         -s|--since) _hours="$2"; shift;;
                  *) break;;
    esac
    shift
  done

  _listprio="0..${_prio:-debug}"

  _journal() {
    journalctl --no-hostname --boot --since "$_hours hours ago" --catalog --line 1000 --reverse --pager-end --unit "$@"
  }
  export -f _journal
  export _hours

  if [[ -z "$_all" && -n "$_prio" ]] ; then
    echo Unit
    journalctl --output=export --output-fields=$(is-root && echo _SYSTEMD_UNIT || echo _SYSTEMD_USER_UNIT) \
               --boot --since "$_hours hours ago" --priority=0..$_prio | \
    sed --silent --regexp-extended 's/^_SYSTEMD_(USER_)?UNIT=(.+)$/\2/p' | \
    sort --unique
  else
    systemctl --plain $_all | \
    sed '/^$/,$d'
  fi | \
  _fzf-wrapper --bind 'alt-f:change-preview(_fzf-preview-header "Unit files for {1}"; systemctl cat -- {1})' \
               --bind "alt-j:change-preview(_fzf-preview-header \"Journal entries for {1} since $_hours hours in reverse order.\"; _journal {1})" \
               --bind "alt-p:change-preview(_fzf-preview-header \"Journal entries for {1} with priority $_listprio since $_hours hours in reverse order.\"; _journal {1} --priority=$_listprio)" \
               --bind "enter:become(echo systemctl status,restart,stop {+1})" \
               --border-label " Systemd Units $([ -z "$_prio" ] || echo -n "with recent journal entry priorities 0/emerg..$_prio ")" \
               --header-lines 1 \
               --help "Alt-f:List unit files;Alt-j:Recent journal entries;Alt-p:Recent journal entries with priority $_listprio;Alt-s:Unit status;Enter:Print systemctl template for selected units" \
               --multi \
               --no-sort \
               --preview-init "alt-s:_fzf-preview-header \"Status of unit {1}\"; systemctl status -- {1}" \
               --preview-window "70%,~2:wrap" \
               --query "$1" \
               --reverse
)

myjournalctl() {
  journalctl --no-hostname --output=with-unit "$@"
}
export -f myjournalctl

is-root || return 0

juser() {
  if [ $# -gt 0 ] ; then
    local _uid="$(id -u "$1")"
    shift
    myjournalctl --pager-end _UID="$_uid" "$@"
  else
    fn-usage "user [journalct options]"
  fi
}
complete -A user -o default juser

mysu() {
    # Start command-line via su for user derived from path owner of last argument.
    # Preserves white spaces in arguments.
    if [ $# -ge 2 ] ; then
      su $(stat -c %U "${*: -1}") -c "$(printf "'%s' " "${@}")"
    else
      fn-usage "command [options|args] file"
    fi
}
complete -A command -o default mysu

oom-killed() {
  myjournalctl --dmesg --since today "$@" | grep -i 'killed process'
}
