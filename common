# -*- shell-script -*-
# Bash functions applicable in interactive login shells and scripts.

in-path() {
  local _cmd
  for _cmd in "$@" ; do
    type -fp "$_cmd" >/dev/null || return 1
  done
}

is-root() {
  [[ "$(id -u)" == "0" ]]
}

abbr-pwd() {
  sed -E -e "s:^${HOME}:~:;s:^.+((/[^/]+){3})$:…\1:;s:([^/]{4})[^/]{4,}([^/]{4})/:\1…\2/:g" <<< "$PWD"
}

cleanup-path() {
  export PATH=$(printf %s "$PATH" | awk -v RS=: -v ORS=: '!arr[$0]++' | sed -r 's/:://g;s/:$//;s/^://')
}

broken-symlinks() {
  local _cmd
  _cmd="echo \"'@'\""

  while [ $# -gt 0 ] ; do
    case "$1" in
      -h|--help) fn-usage "[--help] [--ls|--rm] [[--] path]"; return 0;;
        -l|--ls) _cmd="ls -l @";;
        -r|--rm) _cmd="rm -vf @";;
             --) shift; break;;
             -*) fn-error "Unsupported option: $1"; return 1;;
              *) break;;
    esac
    shift
  done

  find "${1:-.}" -xtype l -print0 | xargs -0r -i@ $_cmd
}

fdl() {
  # - fd with colored detailed list output ignoring Git worktree repos.
  # - "sed | column" is required to align fd output and to create columns suitable for feeding to
  #   fzf (desired columns might be selected via "--delimiter $'\u00a0' --with-nth
  #   <comma-separated-column-ids").
  # - It is assumed that "fd --list-details .." output is sorted by path column. Applying sort(1) to
  #   a column with escape sequences creates an undesired order (sorts by colors selected vi $LS_COLORS).
  #   And even this sorting is partly broken.
  # - $TIME_STYLE is set to ensure that "sort --general-numeric-sort .." works for "Modified" column.

  local _header _sort
  local -a _fdargs _sortcmd
  while [ $# -gt 0 ] ; do
    case "$1" in
        -h|--help) fn-usage "[--help] [--header] [--sort r?(date|path|size)] [{fd-argument}]"; return 0;;
        -s|--sort) [[ "$2" =~ ^r?(date|path|size)$ ]] && _sort="$2" || fn-abort "Unsupported --sort value: $2"; shift;;
         --header) _header=y;;
                *) _fdargs+=("$1");;
    esac
    shift
  done

  if [[ ${#_fdargs[@]} -gt 0 && ! "${_fdargs[0]}" == "." && -d "${_fdargs[0]}" ]] ; then
    _fdargs=(. "${_fdargs[@]}")
    [ -n "$_sort" ] || _sort=date
  fi

  case "$_sort" in
    date|rdate) _sortcmd=(sort -t"|" -k6d${_sort/date/});;
         rpath) _sortcmd=(tac);;
    size|rsize) _sortcmd=(sort -t"|" -k5h${_sort/size/});;
             *) _sortcmd=(cat);;
  esac

  TIME_STYLE="+%F %T" fd "${_fdargs[@]}" --exclude .git --color=always --list-details | \
  sed -r 's~^([^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[0-9]+,) ([0-9]+)~\1\2~;
          s~^([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) +([^ ][^\x1B]+) +([/\.\x1B])~\1|\2|\3|\4|\5|\6|\7~;
          s~(|\x1B\[[0-9\;]m)\./~\1~' | \
  { [ -z "$_header" ] || echo "Permission|Blk|Owner|Group|Size|Modified|Path"
    ${_sortcmd[@]}
  } | column -t -s"|" -o$' \u00a0' -l8 -R5
}
complete -o bashdefault -o default -o nosort -F _fd fdl

find-last() {
  local _tail
  local -a _fdlargs
  while [ $# -gt 0 ] ; do
    case "$1" in
      -h|--help) fn-usage "[--help] [--tail n] [{fd-argument}]"; return 0;;
      -T|--tail) _tail="$2"; shift;;
              *) _fdlargs+=("$1");;
    esac
    shift
  done

  fdl "${_fdlargs[@]}" --sort date | tail -${_tail:-10}
}
complete -o bashdefault -o default -o nosort -F _fd find-last

if in-path keepassxc-cli ; then

  mypassgen() {
    #CAUTION: Vault (root) token must not contain dots!
    keepassxc-cli generate --length "${1:-14}" --lower --upper --numeric --special --exclude-similar \
                           --every-group --exclude "({[<>]})&*?'\\\`\$\!\"."
  }

fi

sort-keep-header() {
  # derived from https://linuxconfig.org/bash-function-to-sort-docker-ps-output
  local _header
  read -r _header
  echo "$_header"
  sort "$@"
}

strip_esc() {
  sed 's/\x1B\[[0-9;]*[a-zA-Z]//g'
}

uriencode() {
  gojq -nr --arg v "$1" '$v|@uri';
}
